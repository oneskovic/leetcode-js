/**
 * @param {number[][]} graph
 * @param {number[]} initial
 * @return {number}
 */
var minMalwareSpread = function (graph, initial) {
  const map = new Map() // node -> initial nodes infect this node
  for (let i of initial) {
    const visited = new Set(initial)
    const q = []
    q.push(i)
    while (q.length) {
      let cur = q.shift()
      for (let j = 0; j < graph[cur].length; j++) {
        if (graph[cur][j] == 1) {
          if (!visited.has(j)) {
            visited.add(j)
            q.push(j)

            if (map.get(j) == null) map.set(j, [])
            map.get(j).push(i)
          }
        }
      }
    }
  }

  const res = Array(graph.length).fill(0) // node -> safe nodes it infects
  for (let node of map.keys()) {
    if (map.get(node).length == 1) {
      let i = map.get(node)[0]
      res[i]++
    }
  }
  let max = 0
  let removed = -1
  for (let i = 0; i < res.length; i++) {
    if (res[i] > max) {
      max = res[i]
      removed = i
    }
  }
  initial.sort((a, b) => a - b)
  return removed == -1 ? initial[0] : removed
}

